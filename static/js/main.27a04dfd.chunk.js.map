{"version":3,"sources":["components/Invoice/invoice.module.css","components/InvoiceForm/invoice-form.module.css","components/FormInput/form-input.module.css","components/InvoiceList/invoice-list.module.css","components/Header/header.module.css","components/Button/button.module.css","components/Header/index.js","stores/Invoices.js","stores/index.js","common/formatCurrency.js","components/Button/index.js","components/Invoice/index.js","components/FormInput/index.js","components/InvoiceForm/index.js","components/InvoiceList/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","className","styles","header","detail","desc","amount","invoice","name","email","date","details","InvoicesStore","this","invoicesList","invoiceIndex","toJS","map","reduce","prev","formattedAmount","substr","parseFloat","observable","action","push","idx","splice","currentInvoice","num","value","index","dataset","displayForm","bool","isEditing","computed","storesContext","createContext","invoicesStore","useStores","useContext","formatCurrency","curr","cents","dollar","currency","toFixed","split","length","join","indexOf","Button","modifier","children","rest","button","defaultProps","setInvoiceIndex","setDisplayForm","invoiceTotalAmoutArray","setIsEditing","useState","displayDetails","setDisplayDetails","i","key","data-index","onClick","ev","target","FormInput","onChange","type","currencyMask","createNumberMask","prefix","suffix","includeThousandsSeparator","thousandsSeparatorSymbol","allowDecimal","decimalSymbol","decimalLimit","integerLimit","allowNegative","allowLeadingZeroes","wrapper","mask","input","e","inputMode","Form","observer","setFormData","addDetailrow","setDetailData","deleteInvoice","closeForm","form","onSubmit","preventDefault","tabIndex","close","required","placeholder","description","step","total","add","InvoiceList","addInvoice","InvoiceForm","Invoice","App","Header","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.27a04dfd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"invoice\":\"invoice_invoice__3HG2m\",\"detail\":\"invoice_detail__dpgi3\",\"button-container\":\"invoice_button-container__1RgTV\",\"button\":\"invoice_button__2oCp4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"invoice-form_form__3af8z\",\"details\":\"invoice-form_details__1FdkZ\",\"description\":\"invoice-form_description__dHnod\",\"amount\":\"invoice-form_amount__2H2eE\",\"add\":\"invoice-form_add__10H3x\",\"total\":\"invoice-form_total__2YqwV\",\"close\":\"invoice-form_close__2-jCY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"form-input_wrapper__2N0G6\",\"input\":\"form-input_input__2bd_G\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"invoice-list\":\"invoice-list_invoice-list__1CI6c\",\"button-container\":\"invoice-list_button-container___k6cX\",\"list-container\":\"invoice-list_list-container__4rtbO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__HZ6Fg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"button_button__2pFT2\"};","import React from 'react';\nimport styles from  './header.module.css';\n\nexport default () => (\n    <header className={styles.header}>Invoices</header>\n    )","import { action, observable, computed, toJS } from 'mobx';\n\n// data models for invoice\nconst detail = { desc: '', amount: '$0' };\nconst invoice = {\n    name: '',\n    email: '',\n    date: '',\n    details: [detail]\n}\n\nexport default class InvoicesStore {\n    // list of all invoices, each invoice has the data model above\n    @observable invoicesList = [];\n    // current working invoice, to keep track when editing/deleting\n    @observable invoiceIndex = 0;\n    // display the  invoice form for edit/add or display invoice list\n    @observable displayForm = false;\n    // display editing options in the invoice form\n    @observable isEditing = false;\n\n    // actions to modify the state\n    @action addInvoice = () => this.invoicesList.push(invoice);\n    @action deleteInvoice = (idx) => this.invoicesList.splice(idx, 1);\n    @action addDetailrow = () => this.currentInvoice.details.push(detail);\n    @action setInvoiceIndex = num => this.invoiceIndex = num;\n    @action setFormData = ({ name, value }) => this.currentInvoice[name] = value;\n    @action setDetailData = ({ name, value, dataset: { index } }) => this.currentInvoice.details[index][name] = value;\n    @action setDisplayForm = () =>  this.displayForm = !this.displayForm;\n    @action setIsEditing = (bool) =>  this.isEditing = bool;\n\n    // shorthard to display current invoice \n    @computed get currentInvoice() {\n        return this.invoicesList[this.invoiceIndex];\n    }\n\n    // create array off the incoice list that has the added amount of all details amounts to display the invoice total\n    @computed get invoiceTotalAmoutArray() {\n        // loop over all invoices\n        return toJS(this.invoicesList).map(invoice => {\n            /// on each invoice loop over each detail and add them up\n            return invoice.details.reduce((prev, { amount }) => {\n                // make sure the amount is a number or can be parsed into one aka remove $ from string\n                const formattedAmount = amount === '' ? 0 : amount.substr(1);\n                // add previus amount with current amount\n                return prev + parseFloat(formattedAmount);\n            }, 0)\n        })\n    }\n\n}\n","import { createContext, useContext } from 'react'\nimport InvoicesStore from './Invoices';\n\n// create store context\nexport const storesContext = createContext({\n    invoicesStore: new InvoicesStore(),\n})\n\n// create hook to implement store\nexport const useStores = () => useContext(storesContext);","// format currency a whole dollar amount, whole dollar with cents, only cents\n// i.e. ($19, $9.95, 6¢)\nexport default function formatCurrency(curr) {\n    let amount;\n    let cents;\n    let dollar;\n    let currency = curr;\n    // if not a number\n    if (typeof currency !== 'number') {\n        return currency;\n    }\n    // only support positive numbers\n    if (currency < 0) {\n        return currency;\n    }\n    // makes sure currency only has 2 decimal places to avoid weird float issues\n    currency = parseFloat(currency.toFixed(2));\n    // multiply by 100\n    cents = currency * 100;\n    // if more than $1 convert to dollars\n    if (cents >= 100) {\n        // make it a string\n        dollar = `${currency}`;\n        // split at the period to add trailing zero if needed\n        dollar = dollar.split('.');\n        // if there are cents\n        if (dollar.length === 2) {\n            // if there is only one character\n            if (dollar[1].length === 1) {\n                // add a zero\n                dollar[1] = `${dollar[1]}0`;\n            }\n        }\n        // join the two parts back together\n        amount = dollar.join('.');\n        // return dollar and cents amount\n        return `$${amount}`;\n    // if no cents\n    } else if (cents === 0) {\n        // return full dollar amount\n        return `$${cents}`;\n    }\n    // convert to string\n    cents = `${cents}`;\n    // if there is a period in the cents number (for floating point issue)\n    if (cents.indexOf('.') > -1) {\n        // split at period\n        cents.split('.');\n        // return only first part, cutting off floating point problem\n        return `${cents[0]}¢`;\n    }\n    // otherwise return as normal\n    return `${cents}¢`;\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport styles from  './button.module.css';\n\nconst Button = ({modifier, children, ...rest}) => (\n    <button className={`${styles.button} ${modifier}`} {...rest}>{children}</button>\n)\n\nButton.propTypes = {\n    onClick: PropTypes.func,\n    modifier: PropTypes.string\n}\n\nButton.defaultProps = {\n    modifier: ''\n};\n\nexport default Button;","import React, { useState} from 'react';\n\nimport formatCurrency from '../../common/formatCurrency';\nimport { useStores } from '../../stores';\n\nimport Button from '../Button';\n\nimport styles from './invoice.module.css';\n\nexport default ({ name, email, date, index, details}) =>{\n\n    const { invoicesStore: { setInvoiceIndex, setDisplayForm, invoiceTotalAmoutArray, setIsEditing} } = useStores();\n    // display invoiceDetails\n    const [displayDetails, setDisplayDetails] = useState(false)\n\n    const editInvoice = (ev) => {\n        setIsEditing(true);\n        // set active invoice to this one and open the form\n        setInvoiceIndex(ev.target.dataset.index);\n        setDisplayForm();\n    }\n\n    return (\n        <div className={styles.invoice}>\n            <p><span className={styles.detail}>Name:</span> {name}</p>\n            <p><span className={styles.detail}>Email:</span> {email}</p>\n            <p><span className={styles.detail}>Date:</span> {date}</p>\n            <p><span className={styles.detail}>Total:</span> {formatCurrency(invoiceTotalAmoutArray[index])}</p>\n            {displayDetails && \n                <ol>\n                    {details.map(({desc, amount}, i) => <li key={i}>{desc} : {formatCurrency(amount)}</li>)}\n                </ol>\n            }\n            <div className={styles['button-container']}>\n                <Button modifier={styles.button} data-index={index} onClick={() => setDisplayDetails(!displayDetails)}>{displayDetails ? 'Hide' : 'View'} Details</Button>\n                <Button modifier={styles.button} data-index={index} onClick={editInvoice}>Edit</Button>\n            </div>\n        </div>\n    )\n}","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport MaskedInput from 'react-text-mask';\nimport createNumberMask from 'text-mask-addons/dist/createNumberMask';\n\nimport styles from './form-input.module.css';\n\nconst FormInput = ({ modifier, onChange, type, currency, ...rest}) =>{\n    // default options for currency input\n    const defaultMaskOptions = {\n        prefix: '$',\n        suffix: '',\n        includeThousandsSeparator: true,\n        thousandsSeparatorSymbol: ',',\n        allowDecimal: true,\n        decimalSymbol: '.',\n        decimalLimit: 2, // how many digits allowed after the decimal\n        integerLimit: 7, // limit length of integer numbers\n        allowNegative: false,\n        allowLeadingZeroes: false,\n    }\n\n    const currencyMask = createNumberMask(defaultMaskOptions)\n    \n    return (\n        <span className={`${styles.wrapper} ${modifier || ''}`}>\n            {currency ?\n                <MaskedInput \n                    {...rest}\n                    mask={currencyMask} \n                    className={styles.input}\n                    onChange={e => onChange(e.target)} \n                    inputMode=\"numeric\"\n                />\n                :\n                <input \n                    {...rest}\n                    type={type}\n                    className={styles.input}\n                    onChange={e => onChange(e.target)} \n                />\n            }\n\n        </span>\n    )\n}\n\nFormInput.propTypes = {\n    onChange: PropTypes.func.isRequired,\n    name: PropTypes.string.isRequired,\n    type: PropTypes.oneOf(['text', 'email', 'date', 'number']),\n    error: PropTypes.string,\n    placeholder: PropTypes.string,\n};\n\nexport default FormInput","import React  from 'react';\nimport { observer } from 'mobx-react-lite';\n\nimport formatCurrency from '../../common/formatCurrency';\nimport { useStores } from '../../stores';\n\nimport Button from '../Button';\nimport FormInput from '../FormInput';\n\nimport styles from './invoice-form.module.css';\n\n\nconst Form = observer(() => {\n\n    const { invoicesStore: { \n        setFormData, \n        addDetailrow, \n        currentInvoice, \n        setDetailData,\n        setDisplayForm, \n        invoiceTotalAmoutArray,\n        isEditing,\n        invoiceIndex,\n        deleteInvoice,\n        invoicesList,\n        setIsEditing\n    }} = useStores();\n    const {name, email, date, details} = currentInvoice;\n    // generic function to close the form and set off flag of isEditing\n    const closeForm = () => {\n        setDisplayForm();\n        if (isEditing) setIsEditing(!isEditing);\n    }\n    // all data is saved live so just close the form\n    const formSubmit = (ev) => {\n        ev.preventDefault();\n        closeForm()\n    }\n    // if we are not editing aka, creating a new invoice delte it\n    const cancelWork = () => {\n        if (!isEditing) deleteInvoice(invoicesList.length - 1);\n        closeForm();\n    }\n    // delete currently open invoice\n    const deleteThisInvoice = () => {\n        deleteInvoice(invoiceIndex);\n        closeForm();\n    }\n\n    return (\n        <form className={styles.form} onSubmit={formSubmit}>\n            <span tabIndex=\"0\" className={styles.close} onClick={() => cancelWork()}>X</span>\n            <FormInput onChange={setFormData} required placeholder='invoice name' name='name' value={name} type='text' />\n            <FormInput onChange={setFormData} required placeholder='email' name='email' value={email} type='email' />\n            <FormInput onChange={setFormData} required placeholder='date' name='date' value={date} type='date' />\n            {details.map(({desc, amount}, i) =>\n                <div className={styles.details} key={i}>\n                    <FormInput modifier={styles.description} required placeholder='description' onChange={setDetailData} name='desc' data-index={i} value={desc} type='text' />\n                    <FormInput modifier={styles.amount} required currency={true} placeholder='0.00' onChange={setDetailData} name='amount' data-index={i} value={amount} type='number' step='0.01' />\n                </div>\n            )}\n            <p className={styles.total}>Total: {formatCurrency(invoiceTotalAmoutArray[invoiceIndex])}</p>\n            <span tabIndex=\"0\" className={styles.add} onClick={() => addDetailrow()}>add row</span>\n            {isEditing && <span tabIndex=\"0\" className={styles.add} onClick={() => deleteThisInvoice()}>Delete</span>}\n            <Button type=\"submit\" >{isEditing ? 'Save': 'Create'}</Button>\n        </form>\n    )\n})\n\nexport default Form;","import React, {Fragment} from 'react';\nimport { observer } from 'mobx-react-lite';\n\nimport { useStores } from '../../stores';\n\nimport Invoice from '../Invoice';\nimport InvoiceForm from '../InvoiceForm';\nimport Button from '../Button';\n\nimport styles from './invoice-list.module.css';\n\nconst InvoiceList = observer (() => {\n\n    const { invoicesStore: { invoiceTotalAmoutArray, setInvoiceIndex, addInvoice, setDisplayForm, invoicesList, displayForm} } = useStores();\n    \n    const createInvoice = () => {\n        // set current invoice to the last one\n        setInvoiceIndex(invoicesList.length);\n        // add invoice to invoicesList array now the active invoice will match with the InvoiceIndex\n        addInvoice();\n        // open the form\n        setDisplayForm();\n    }\n\n    return (\n        <section className={styles['invoice-list']}>\n            {displayForm ? \n                <InvoiceForm />\n                :\n                <Fragment>\n                    <div className={styles['button-container']}>\n                        <Button onClick={() => createInvoice()}>create invoice</Button>\n                    </div>\n                    <div className={styles['list-container']}>\n                        {invoicesList.map((invoice, i) => <Invoice key={i} total={invoiceTotalAmoutArray[i]} index={i} {...invoice} />)}\n                    </div>\n                </Fragment>\n            }\n        </section>\n    )\n})\n\nexport default InvoiceList;\n","import React from 'react';\nimport { observer } from 'mobx-react-lite';\n\nimport Header from './components/Header';\nimport InvoiceList from './components/InvoiceList';\n\nimport './App.css';\n\nconst App = observer(() => {\n\n  return (\n    <main className=\"app\">\n      <Header/>\n      <InvoiceList/>\n    </main>\n  );\n})\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}